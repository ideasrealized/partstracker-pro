#!/bin/bash

# PartsTracker Pro - Project Setup Script
# This script initializes the Firebase project and sets up the development environment

echo "🚀 Setting up PartsTracker Pro..."

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please install Node.js 16+ first."
    exit 1
fi

# Check if Firebase CLI is installed
if ! command -v firebase &> /dev/null; then
    echo "📦 Installing Firebase CLI..."
    npm install -g firebase-tools
fi

# Create project structure
echo "📁 Creating project structure..."

# Public directory structure
mkdir -p public/{manager,tech,reports,css,js,assets}

# Functions directory
mkdir -p functions

# Documentation directory
mkdir -p docs

# Sample data directory (if not exists)
mkdir -p sample-data

# Create basic HTML files if they don't exist
if [ ! -f "public/index.html" ]; then
    echo "📄 Creating basic index.html..."
    cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PartsTracker Pro</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin: 50px; }
        .hero { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 50px; border-radius: 20px; }
        .btn { display: inline-block; padding: 15px 30px; margin: 10px; background: #3498db; color: white; text-decoration: none; border-radius: 8px; }
        .btn:hover { background: #2980b9; }
    </style>
</head>
<body>
    <div class="hero">
        <h1>🔧 PartsTracker Pro</h1>
        <p>Streamline your parts inventory tracking</p>
        <a href="/manager" class="btn">Manager Dashboard</a>
        <a href="/reports" class="btn">Report Viewer</a>
    </div>
    <p>Professional parts tracking for field service teams</p>
</body>
</html>
EOF
fi

# Copy existing HTML files to proper locations
if [ -f "manager_dashboard.html" ]; then
    echo "📋 Moving manager dashboard..."
    cp manager_dashboard.html public/manager/dashboard.html
fi

if [ -f "parts_inventory_tracker.html" ]; then
    echo "📋 Moving parts tracker..."
    cp parts_inventory_tracker.html public/tech/update.html
fi

if [ -f "parts_reports_viewer.html" ]; then
    echo "📋 Moving report viewer..."
    cp parts_reports_viewer.html public/reports/viewer.html
fi

# Create Firebase Functions package.json
if [ ! -f "functions/package.json" ]; then
    echo "📦 Creating Functions package.json..."
    cat > functions/package.json << 'EOF'
{
  "name": "partstracker-functions",
  "description": "Firebase Functions for PartsTracker Pro",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log",
    "build": "echo 'No build step required'"
  },
  "engines": {
    "node": "16"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^11.8.0",
    "firebase-functions": "^4.3.1",
    "nodemailer": "^6.9.3",
    "pdf-parse": "^1.1.1"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}
EOF
fi

# Create basic Firebase Functions index.js
if [ ! -f "functions/index.js" ]; then
    echo "⚡ Creating Functions index.js..."
    cat > functions/index.js << 'EOF'
const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

// Example function - PDF processing
exports.processPDF = functions.https.onCall(async (data, context) => {
  // PDF processing logic will go here
  console.log('Processing PDF:', data.fileName);
  return { success: true, message: 'PDF processed successfully' };
});

// Example function - Send email notification
exports.sendEmailNotification = functions.https.onCall(async (data, context) => {
  // Email sending logic will go here
  console.log('Sending email to:', data.email);
  return { success: true, message: 'Email sent successfully' };
});

// Example function - Generate secure link
exports.generateSecureLink = functions.https.onCall(async (data, context) => {
  // Link generation logic will go here
  const linkId = Math.random().toString(36).substr(2, 9);
  console.log('Generated link ID:', linkId);
  return { linkId: linkId, expiresAt: Date.now() + (24 * 60 * 60 * 1000) };
});
EOF
fi

# Create Firestore rules
if [ ! -f "firestore.rules" ]; then
    echo "🔒 Creating Firestore security rules..."
    cat > firestore.rules << 'EOF'
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Parts data - temporary storage
    match /parts/{partId} {
      allow read, write: if request.time < resource.data.expiresAt;
    }
    
    // Company data - isolated by company ID
    match /companies/{companyId}/data/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.companyId == companyId;
    }
    
    // Public read for landing page content
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}
EOF
fi

# Create Storage rules
if [ ! -f "storage.rules" ]; then
    echo "📦 Creating Storage security rules..."
    cat > storage.rules << 'EOF'
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // PDF uploads - temporary storage
    match /pdfs/{allPaths=**} {
      allow read, write: if request.time < timestamp.date(2024, 12, 31) &&
        resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Company-specific data
    match /companies/{companyId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        request.auth.token.companyId == companyId;
    }
  }
}
EOF
fi

# Create basic documentation
if [ ! -f "docs/development-guide.md" ]; then
    echo "📚 Creating development guide..."
    cat > docs/development-guide.md << 'EOF'
# Development Guide

## Local Development

### Start Local Server
```bash
firebase serve
```

### Test Functions Locally
```bash
cd functions
npm install
firebase emulators:start
```

### Deploy to Firebase
```bash
firebase deploy
```

## Key Files
- `public/manager/dashboard.html` - Manager interface
- `public/tech/update.html` - Technician interface  
- `public/reports/viewer.html` - Report generation
- `functions/index.js` - Backend logic

## Testing
Use PDF files in `/sample-data/` to test parsing accuracy.

## Troubleshooting
- Check Firebase console for errors
- Use browser dev tools for frontend issues
- Review function logs: `firebase functions:log`
EOF
fi

# Initialize Git if not already initialized
if [ ! -d ".git" ]; then
    echo "🔧 Initializing Git repository..."
    git init
    git add .
    git commit -m "Initial project setup"
fi

# Login to Firebase and initialize project
echo "🔥 Setting up Firebase..."
echo "Next steps:"
echo "1. Run 'firebase login' if not already logged in"
echo "2. Run 'firebase init' to set up your Firebase project"
echo "3. Select Hosting, Functions, Firestore, and Storage"
echo "4. Use existing files when prompted"
echo "5. Run 'firebase serve' to test locally"
echo "6. Run 'firebase deploy' when ready for production"

echo ""
echo "✅ Project setup complete!"
echo "📁 Project structure created"
echo "🔧 Configuration files ready"
echo "📚 Documentation generated"
echo ""
echo "Run 'firebase login && firebase init' to continue setup."
EOF